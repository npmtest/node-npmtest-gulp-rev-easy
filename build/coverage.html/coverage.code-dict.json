{"/home/travis/build/npmtest/node-npmtest-gulp-rev-easy/test.js":"/* istanbul instrument in package npmtest_gulp_rev_easy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-easy/lib.npmtest_gulp_rev_easy.js":"/* istanbul instrument in package npmtest_gulp_rev_easy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_rev_easy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_rev_easy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-easy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-rev-easy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_rev_easy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_rev_easy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_rev_easy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_rev_easy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_rev_easy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_rev_easy.__dirname + '/lib.npmtest_gulp_rev_easy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-easy/node_modules/gulp-rev-easy/index.js":"var path = require('path');\r\nvar through = require('through2');\r\nvar cheerio = require('cheerio');\r\nvar gutil = require('gulp-util');\r\nvar fs = require('fs');\r\nvar dateformat = require('dateformat');\r\nvar url = require('url');\r\nvar _ = require('lodash');\r\nvar crypto = require('crypto');\r\nvar revver = require('./src/revver');\r\n\r\n\r\nmodule.exports = function(options) {\r\n    return through.obj(function(file, enc, cb) {\r\n\r\n        options = revver.setOptions(options);\r\n\r\n        if (options.cwd) {\r\n            gutil.log(gutil.colors.red('options.cwd is obsoleted, use options.base or set gulp.src(path, {cwd:mycwd}) instead'));\r\n            return;\r\n        }\r\n\r\n        gutil.log('==== begin rev:' + gutil.colors.cyan(file.path));\r\n        if (file.isNull()) {\r\n            this.push(file);\r\n            return cb();\r\n        }\r\n\r\n        if (file.isStream()) {\r\n            this.emit('error', new gutil.PluginError('gulp-rev-easy', 'Streaming is not supported'));\r\n            return cb();\r\n        }\r\n\r\n        var parser = require('./src/parser/' + options.revMode);\r\n        var revText = parser.parse(file.contents.toString(), file.path, options);\r\n        file.contents = new Buffer(revText);\r\n\r\n        gutil.log('==== end rev:' + gutil.colors.cyan(file.path));\r\n\r\n        this.push(file);\r\n        return cb();\r\n    });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-gulp-rev-easy/node_modules/gulp-rev-easy/src/revver.js":"/**\r\n * Created by timtian on 2016/8/26.\r\n */\r\n\r\n\r\nvar path = require('path');\r\nvar gutil = require('gulp-util');\r\nvar fs = require('fs');\r\nvar dateformat = require('dateformat');\r\nvar url = require('url');\r\nvar _ = require('lodash');\r\nvar crypto = require('crypto');\r\n\r\nvar fileverCache = {};\r\n\r\n\r\nvar revver= {};\r\nrevver.rev = function(src, filepath, options) {\r\n    var revv = '';\r\n\r\n    if (options.revType === 'hash') {\r\n\r\n        var assertpath = options.findFile(src, filepath, options);\r\n        if (fs.existsSync(assertpath)) {\r\n            var mtime = +fs.statSync(assertpath).mtime;\r\n            if (fileverCache[assertpath] && fileverCache[assertpath].mtime == mtime) {\r\n                revv = fileverCache[assertpath].rev;\r\n                gutil.log(gutil.colors.green('found in cache >>' + assertpath + '@' + mtime));\r\n            } else {\r\n                revv = crypto\r\n                    .createHash('md5')\r\n                    .update(\r\n                        fs.readFileSync(assertpath, {\r\n                            encoding: 'utf8'\r\n                        }))\r\n                    .digest('hex').substring(0, options.hashLength);\r\n            }\r\n            fileverCache[assertpath] = {\r\n                mtime: mtime,\r\n                rev: revv\r\n            };\r\n        } else {\r\n            gutil.log(gutil.colors.red(assertpath + ' not found'));\r\n        }\r\n    } else {\r\n        revv = dateformat(new Date(), options.dateFormat);\r\n    }\r\n\r\n    return revv;\r\n};\r\n\r\n\r\nvar defaultOptions = {\r\n    base: '',\r\n    suffix: 'v',\r\n    fileTypes: ['js', 'css', 'img'],\r\n    hashLength: 8,\r\n    dateFormat: 'yyyymmddHHMM',\r\n    revType: 'hash',\r\n    revMode: 'plain',\r\n    transformPath: function(orgPath, rev) {\r\n        var reg = new RegExp('((\\\\?|\\\\&|\\\\&amp\\\\;)' + this.suffix + '=)([^&\\\\s]+)', 'gi');\r\n        var newpath = orgPath;\r\n        if (reg.test(orgPath)) {\r\n            newpath = orgPath.replace(reg, '$1' + rev);\r\n        } else {\r\n            newpath += ((orgPath.indexOf('?') > -1 ? '&' : '?') + this.suffix + '=' + rev);\r\n        }\r\n        return newpath;\r\n    },\r\n    findFile: function(src, filepath, options){\r\n        var assetPath = src;\r\n        var srcpath = url.parse(src).pathname;\r\n        //if is a /a/b/c/i.png path need a basedir\r\n        if ((/^\\/{1}[^\\/]+/gi).test(srcpath)) {\r\n            assetPath = path.join(options.base, srcpath);\r\n        } else {\r\n            assetPath = path.join(path.dirname(filepath), srcpath);\r\n        }\r\n        return assetPath;\r\n    },\r\n    elementAttributes: {\r\n        js: {\r\n            name: 'script',\r\n            src: 'src'\r\n        },\r\n        css: {\r\n            name: 'link[rel=\"stylesheet\"]',\r\n            src: 'href'\r\n        },\r\n        img: {\r\n            name: 'img',\r\n            src: 'src'\r\n        }\r\n    },\r\n    patterns:{\r\n        js:{\r\n            regex:/(<script[^>]*?\\s+src=)(\"(?:.+?)\"|'(?:.+?)')([^>]*?>)/gi\r\n        },\r\n        css:{\r\n            regex:/(<link[^>]*?\\s+rel=['\"]stylesheet['\"]?[^>]*?\\s+href=)(\"(?:.+?)\"|'(?:.+?)')([^>]*?>)/gi\r\n        },\r\n        img:{\r\n            regex:/(<img[^>]*?\\s+src=)(\"(?:.+?)\"|'(?:.+?)')([^>]*?>)/gi\r\n        }\r\n    },\r\n    ignorePattern:/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)+<\\/script>/gi,\r\n    ignoreFilter:function(match){\r\n        var type = \"text/javascript\";\r\n        var m = (/^<script[^>]type=(.+)>/gi).exec(match[0]);\r\n        if(m){\r\n            type = _.trim(m[1], '\"\\'').toLowerCase();\r\n        }\r\n        return type == \"text/javascript\";\r\n    }\r\n};\r\n\r\n//ignorePattern:/<script[^>]*?type=['\"]?text\\/javascript['\"]?[^>]*?>[\\s\\S]{10,}?<\\/script>/gi\r\n\r\nrevver.setOptions = function(options){\r\n    var newObj = _.assign({}, defaultOptions, options);\r\n    newObj.elementAttributes = _.assign({}, defaultOptions.elementAttributes, options.elementAttributes);\r\n    newObj.patterns = _.assign({}, defaultOptions.patterns, options.patterns);\r\n    return newObj\r\n}\r\n\r\nmodule.exports = revver;","/home/travis/build/npmtest/node-npmtest-gulp-rev-easy/node_modules/gulp-rev-easy/src/parser/dom.js":"/**\r\n * Created by timtian on 2016/8/26.\r\n */\r\nvar cheerio = require('cheerio');\r\nvar gutil = require('gulp-util');\r\nvar revver = require('../revver');\r\n\r\n\r\nvar parser = {};\r\n\r\nparser.parse = function(text, filepath, options) {\r\n    try {\r\n        var $ = cheerio.load(text, {\r\n            decodeEntities: false\r\n        });\r\n\r\n        for (var i = 0; i < options.fileTypes.length; i++) {\r\n            var fileType = options.fileTypes[i];\r\n            var attributes = options.elementAttributes[fileType];\r\n\r\n            var $assets = $(attributes.name);\r\n            for (var j = 0; j < $assets.length; j++) {\r\n                var $asset = $assets.eq(j);\r\n                var src = $asset.attr(attributes.src);\r\n\r\n                if (src && !src.match(/.*(\\/\\/).*/)) {\r\n                    var revv = revver.rev(src, filepath, options);\r\n\r\n                    if (revv !== '') {\r\n                        var newsrc = options.transformPath(src, revv);\r\n                        $asset.attr(attributes.src, newsrc);\r\n                        gutil.log(src + ' --> ', gutil.colors.green(newsrc));\r\n                    } else {\r\n                        gutil.log(gutil.colors.blue('ignore:rev is empty'), src);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return $.html();\r\n\r\n    } catch (err) {\r\n        gutil.log(gutil.colors.red(err.message));\r\n        gutil.log(gutil.colors.red(err.stack));\r\n    }\r\n};\r\n\r\nmodule.exports = parser;","/home/travis/build/npmtest/node-npmtest-gulp-rev-easy/node_modules/gulp-rev-easy/src/parser/plain.js":"/**\r\n * Created by timtian on 2016/8/26.\r\n */\r\nvar gutil = require('gulp-util');\r\nvar revver = require('../revver');\r\n\r\n\r\nvar parser = {};\r\n\r\nparser.parse = function (text, filepath, options) {\r\n    try {\r\n\r\n        var resText = [];\r\n        var textList = [];\r\n        var mList = [];\r\n        if (options.ignorePattern) {\r\n            var tmptextList = text.split(options.ignorePattern);\r\n\r\n            var m;\r\n            var mindex = 0;\r\n            textList.push({raw: tmptextList[mindex], ignore: false});\r\n            while ((m = options.ignorePattern.exec(text)) !== null) {\r\n                textList.push({raw: m[0], ignore: options.ignoreFilter(m)});\r\n                mindex++;\r\n                textList.push({raw: tmptextList[mindex], ignore: false});\r\n            }\r\n        } else {\r\n            textList.push({raw:text, ignore:false});\r\n        }\r\n\r\n\r\n\r\n        for (var j = 0; j < textList.length; j++) {\r\n            var revObj = textList[j];\r\n            if (!revObj.ignore) {\r\n                var revText = revObj.raw;\r\n                for (var i = 0; i < options.fileTypes.length; i++) {\r\n                    var fileType = options.fileTypes[i];\r\n                    var pattern = options.patterns[fileType];\r\n                    revText = revText.replace(pattern.regex, function (match, p1, p2, p3, offset, string) {\r\n\r\n                        var q = p2.substring(0, 1);\r\n                        var src = p2.substring(1, p2.length - 1);\r\n                        var revv = revver.rev(src, filepath, options);\r\n                        var newsrc = p2;\r\n\r\n                        if (revv !== '') {\r\n                            newsrc = options.transformPath(src, revv);\r\n                            gutil.log(src + ' --> ', gutil.colors.green(newsrc));\r\n                        } else {\r\n                            gutil.log(gutil.colors.blue('ignore:rev is empty'), src);\r\n                        }\r\n\r\n                        return p1 + q + newsrc + q + p3;\r\n                    })\r\n                }\r\n                resText.push(revText);\r\n            }else{\r\n                resText.push(revObj.raw);\r\n            }\r\n\r\n\r\n            if (mList.length > 0)\r\n                resText.push(mList.shift());\r\n        }\r\n\r\n\r\n        return resText.join('');\r\n    } catch (err) {\r\n        gutil.log(gutil.colors.red(err.message));\r\n        gutil.log(gutil.colors.red(err.stack));\r\n    }\r\n};\r\n\r\nmodule.exports = parser;"}